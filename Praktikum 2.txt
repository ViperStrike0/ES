#include <pico/stdlib.h>
#include <hardware/i2c.h>

// I2C Configuration
#define I2C_INSTANCE i2c0
#define PIN_SDA 4
#define PIN_SCL 5

// HT16K33 Device Settings
#define DEVICE_ADDRESS 0x70
#define CMD_SYSTEM_SETUP 0x20
#define CMD_DISPLAY_SETUP 0x80
#define CMD_BRIGHTNESS 0xE0

// Function to initialize I2C communication
void initialize_i2c() {
    gpio_set_function(PIN_SDA, GPIO_FUNC_I2C);
    gpio_set_function(PIN_SCL, GPIO_FUNC_I2C);
    gpio_pull_up(PIN_SDA);
    gpio_pull_up(PIN_SCL);
    i2c_init(I2C_INSTANCE, 100000); // 100 kHz clock speed
}

// Function to set up the HT16K33 device
void setup_ht16k33() {
    uint8_t config[1];

    // Activate system oscillator
    config[0] = CMD_SYSTEM_SETUP | 0x01;
    i2c_write_blocking(I2C_INSTANCE, DEVICE_ADDRESS, config, 1, false);

    // Enable the display
    config[0] = CMD_DISPLAY_SETUP | 0x01;
    i2c_write_blocking(I2C_INSTANCE, DEVICE_ADDRESS, config, 1, false);

    // Set brightness to the maximum
    config[0] = CMD_BRIGHTNESS | 0x0F;
    i2c_write_blocking(I2C_INSTANCE, DEVICE_ADDRESS, config, 1, false);
}

// Function to clear the LED matrix
void clear_display() {
    uint8_t data[17] = {0}; // First byte for RAM address, rest for clearing LEDs
    i2c_write_blocking(I2C_INSTANCE, DEVICE_ADDRESS, data, 17, false);
}

// Function to update the LED matrix with a progress level
void display_progress(float level) {
    uint8_t data[17] = {0};
    int total_leds = (int)((level / 200.0) * 128);

    for (int i = 0; i < 16; i++) {
        if (total_leds >= 8) {
            data[i + 1] = 0xFF;
            total_leds -= 8;
        } else {
            data[i + 1] = (1 << total_leds) - 1;
            break;
        }
    }

    i2c_write_blocking(I2C_INSTANCE, DEVICE_ADDRESS, data, 17, false);
}

// Main program loop
int main() {
    stdio_init_all();
    initialize_i2c();
    setup_ht16k33();
    clear_display();

    while (1) {
        for (float progress = 0; progress <= 200; progress += 20) {
            display_progress(progress);
            sleep_ms(500);
        }
    }

    return 0;
}